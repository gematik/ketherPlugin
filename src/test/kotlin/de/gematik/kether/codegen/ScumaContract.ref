package de.gematik.kether.codegen
import de.gematik.kether.abi.DataDecoder
import de.gematik.kether.abi.DataEncoder
import de.gematik.kether.abi.isTypeDynamic
import de.gematik.kether.abi.types.*
import de.gematik.kether.contracts.Contract
import de.gematik.kether.contracts.Event
import de.gematik.kether.eth.Eth
import de.gematik.kether.eth.types.*
import de.gematik.kether.extensions.hexToByteArray
import de.gematik.kether.extensions.keccak
import kotlinx.serialization.ExperimentalSerializationApi
import java.math.BigInteger
@OptIn(ExperimentalSerializationApi::class)
class ScumaContract(
eth: Eth,
baseTransaction: Transaction = Transaction(),
privateKey: BigInteger? = null
) : Contract(eth, baseTransaction, privateKey) {
companion object {
// deployment
val byteCode = "0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018081600181540180825580915050039060005260206000200160009054906101000a905050600360018160018154018082558091505003906000526020600020905050611d85806100a56000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c806353a5ee831161006657806353a5ee83146100f6578063a31c8ebb14610112578063c6512a431461012e578063c82c7bb81461014a578063e5c2723d1461015457610093565b806305240e8b146100985780630e260016146100b4578063279ca469146100d057806349f24537146100da575b600080fd5b6100b260048036038101906100ad9190611595565b610184565b005b6100ce60048036038101906100c99190611595565b610355565b005b6100d861049d565b005b6100f460048036038101906100ef91906115f8565b610624565b005b610110600480360381019061010b91906115f8565b6107bc565b005b61012c60048036038101906101279190611625565b6108b5565b005b6101486004803603810190610143919061168a565b610ae3565b005b610152610c99565b005b61016e60048036038101906101699190611742565b610ddc565b60405161017b9190611906565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610212576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020990611985565b60405180910390fd5b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081111561035157600180808054905061027191906119d4565b8154811061028257610281611a08565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600182815481106102c1576102c0611a08565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600180548061031b5761031a611a37565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590555b5050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103da90611985565b60405180910390fd5b6001819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001808054905061045791906119d4565b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461052b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052290611985565b60405180910390fd5b60005b6001808054905061053f91906119d4565b81101561062157600260006001838154811061055e5761055d611a08565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000905560018054806105d9576105d8611a37565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055808061061990611a66565b91505061052e565b50565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054116106a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069d90611afa565b60405180910390fd5b600460018160018154018082558091505003906000526020600020505060036001816001815401808255809150500390600052602060002090505080600360016003805490506106f691906119d4565b8154811061070757610706611a08565b5b9060005260206000209060020201600001819055506004600160048054905061073091906119d4565b8154811061074157610740611a08565b5b906000526020600020016003600160038054905061075f91906119d4565b815481106107705761076f611a08565b5b906000526020600020906002020160010190805461078f929190611298565b5060016003805490506107a291906119d4565b600560008381526020019081526020016000208190555050565b60006005600083815260200190815260200160002054905060008111156108b157600360016003805490506107f191906119d4565b8154811061080257610801611a08565b5b90600052602060002090600202016003828154811061082457610823611a08565b5b906000526020600020906002020160008201548160000155600182018160010190805461085292919061138e565b50905050600380548061086857610867611a37565b5b60019003818190600052602060002090600202016000808201600090556001820160006108959190611484565b5050905560056000838152602001908152602001600020600090555b5050565b60006005600084815260200190815260200160002054905060008111610910576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090790611b8c565b60405180910390fd5b60006003828154811061092657610925611a08565b5b906000526020600020906002020190508060010180549050831061097f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097690611bf8565b60405180910390fd5b806001016001826001018054905061099791906119d4565b815481106109a8576109a7611a08565b5b906000526020600020018160010184815481106109c8576109c7611a08565b5b906000526020600020016000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000820160149054906101000a900460ff168160000160146101000a81548160ff02191690836003811115610a7157610a706117dd565b5b021790555090505080600101805480610a8d57610a8c611a37565b5b60019003818190600052602060002001600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a81549060ff02191690555050905550505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b71576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6890611985565b60405180910390fd5b6000600560008581526020019081526020016000205490506000811115610c935760038181548110610ba657610ba5611a08565b5b906000526020600020906002020160010160405180604001604052808573ffffffffffffffffffffffffffffffffffffffff168152602001846003811115610bf157610bf06117dd565b5b8152509080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548160ff02191690836003811115610c8b57610c8a6117dd565b5b021790555050505b50505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1e90611985565b60405180910390fd5b60006001600380549050610d3b91906119d4565b90505b6000811015610dd9576005600060038381548110610d5f57610d5e611a08565b5b9060005260206000209060020201600001548152602001908152602001600020600090556003805480610d9557610d94611a37565b5b6001900381819060005260206000209060020201600080820160009055600182016000610dc29190611484565b505090558080610dd190611c18565b915050610d3e565b50565b60606000805b84849050811015610fe1576000858583818110610e0257610e01611a08565b5b905060400201803603810190610e189190611d22565b9050600060056000836000015181526020019081526020016000205490506000811115610fcc57600060038281548110610e5557610e54611a08565b5b9060005260206000209060020201905060005b8160010180549050811015610fc9576000826001018281548110610e8f57610e8e611a08565b5b906000526020600020016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900460ff166003811115610f1f57610f1e6117dd565b5b6003811115610f3157610f306117dd565b5b8152505090508a73ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff16148015610fa1575084602001516003811115610f8857610f876117dd565b5b81602001516003811115610f9f57610f9e6117dd565b5b145b15610fb5578680610fb190611a66565b9750505b508080610fc190611a66565b915050610e68565b50505b50508080610fd990611a66565b915050610de2565b5060008167ffffffffffffffff811115610ffe57610ffd611c57565b5b60405190808252806020026020018201604052801561103757816020015b6110246114a5565b81526020019060019003908161101c5790505b5090506000915060005b8585905081101561128b57600086868381811061106157611060611a08565b5b9050604002018036038101906110779190611d22565b9050600060056000836000015181526020019081526020016000205490506000811115611276576000600382815481106110b4576110b3611a08565b5b9060005260206000209060020201905060005b81600101805490508110156112735760008260010182815481106110ee576110ed611a08565b5b906000526020600020016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900460ff16600381111561117e5761117d6117dd565b5b60038111156111905761118f6117dd565b5b8152505090508b73ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff161480156112005750846020015160038111156111e7576111e66117dd565b5b816020015160038111156111fe576111fd6117dd565b5b145b1561125f5760405180604001604052808660000151815260200182602001516003811115611231576112306117dd565b5b81525087898061124090611a66565b9a508151811061125357611252611a08565b5b60200260200101819052505b50808061126b90611a66565b9150506110c7565b50505b5050808061128390611a66565b915050611041565b5080925050509392505050565b82805482825590600052602060002090810192821561137d5760005260206000209182015b8281111561137c5782826000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000820160149054906101000a900460ff168160000160146101000a81548160ff02191690836003811115611366576113656117dd565b5b02179055505050916001019190600101906112bd565b5b50905061138a91906114d1565b5090565b8280548282559060005260206000209081019282156114735760005260206000209182015b828111156114725782826000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000820160149054906101000a900460ff168160000160146101000a81548160ff0219169083600381111561145c5761145b6117dd565b5b02179055505050916001019190600101906113b3565b5b50905061148091906114d1565b5090565b50805460008255906000526020600020908101906114a291906114d1565b50565b604051806040016040528060008152602001600060038111156114cb576114ca6117dd565b5b81525090565b5b8082111561151f57600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a81549060ff0219169055506001016114d2565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061156282611537565b9050919050565b61157281611557565b811461157d57600080fd5b50565b60008135905061158f81611569565b92915050565b6000602082840312156115ab576115aa61152d565b5b60006115b984828501611580565b91505092915050565b6000819050919050565b6115d5816115c2565b81146115e057600080fd5b50565b6000813590506115f2816115cc565b92915050565b60006020828403121561160e5761160d61152d565b5b600061161c848285016115e3565b91505092915050565b6000806040838503121561163c5761163b61152d565b5b600061164a858286016115e3565b925050602061165b858286016115e3565b9150509250929050565b6004811061167257600080fd5b50565b60008135905061168481611665565b92915050565b6000806000606084860312156116a3576116a261152d565b5b60006116b1868287016115e3565b93505060206116c286828701611580565b92505060406116d386828701611675565b9150509250925092565b600080fd5b600080fd5b600080fd5b60008083601f840112611702576117016116dd565b5b8235905067ffffffffffffffff81111561171f5761171e6116e2565b5b60208301915083604082028301111561173b5761173a6116e7565b5b9250929050565b60008060006040848603121561175b5761175a61152d565b5b600061176986828701611580565b935050602084013567ffffffffffffffff81111561178a57611789611532565b5b611796868287016116ec565b92509250509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6117d7816115c2565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6004811061181d5761181c6117dd565b5b50565b600081905061182e8261180c565b919050565b600061183e82611820565b9050919050565b61184e81611833565b82525050565b60408201600082015161186a60008501826117ce565b50602082015161187d6020850182611845565b50505050565b600061188f8383611854565b60408301905092915050565b6000602082019050919050565b60006118b3826117a2565b6118bd81856117ad565b93506118c8836117be565b8060005b838110156118f95781516118e08882611883565b97506118eb8361189b565b9250506001810190506118cc565b5085935050505092915050565b6000602082019050818103600083015261192081846118a8565b905092915050565b600082825260208201905092915050565b7f4e6f74206f776e65720000000000000000000000000000000000000000000000600082015250565b600061196f600983611928565b915061197a82611939565b602082019050919050565b6000602082019050818103600083015261199e81611962565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006119df826115c2565b91506119ea836115c2565b9250828203905081811115611a0257611a016119a5565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6000611a71826115c2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611aa357611aa26119a5565b5b600182019050919050565b7f50726f7669646572206e6f7420617574686f72697a6564000000000000000000600082015250565b6000611ae4601783611928565b9150611aef82611aae565b602082019050919050565b60006020820190508181036000830152611b1381611ad7565b9050919050565b7f70726f746563746564207265736f7572636520646f6573206e6f74206578697360008201527f7400000000000000000000000000000000000000000000000000000000000000602082015250565b6000611b76602183611928565b9150611b8182611b1a565b604082019050919050565b60006020820190508181036000830152611ba581611b69565b9050919050565b7f72756c6520646f6573206e6f7420657869737400000000000000000000000000600082015250565b6000611be2601383611928565b9150611bed82611bac565b602082019050919050565b60006020820190508181036000830152611c1181611bd5565b9050919050565b6000611c23826115c2565b915060008203611c3657611c356119a5565b5b600182039050919050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611c8f82611c46565b810181811067ffffffffffffffff82111715611cae57611cad611c57565b5b80604052505050565b6000611cc1611523565b9050611ccd8282611c86565b919050565b600060408284031215611ce857611ce7611c41565b5b611cf26040611cb7565b90506000611d02848285016115e3565b6000830152506020611d1684828501611675565b60208301525092915050565b600060408284031215611d3857611d3761152d565b5b6000611d4684828501611cd2565b9150509291505056fea2646970667358221220514dc4a66c5fb7d3d347c826145dd01a7e2334c14979b04d8fa59221a49d1f3e64736f6c63430008110033".hexToByteArray()
fun deploy(eth:Eth, from: Address, privateKey: BigInteger? = null): TransactionReceipt {
val params = Data(
byteCode + DataEncoder()
.build().toByteArray()
)
return deploy(eth, from, params, privateKey)
}
// 4 byte selectors (functions) and topics (events)
val functionDeleteRule = "deleteRule(uint256,uint256)".keccak().copyOfRange(0, 4)
val functionRegisterProvider = "registerProvider(address)".keccak().copyOfRange(0, 4)
val functionRegisterResource = "registerResource(uint256)".keccak().copyOfRange(0, 4)
val functionRequestPermissions = "requestPermissions(address,(uint256,uint8)[])".keccak().copyOfRange(0, 4)
val functionSetRule = "setRule(uint256,address,uint8)".keccak().copyOfRange(0, 4)
val functionUnregisterAllProviders = "unregisterAllProviders()".keccak().copyOfRange(0, 4)
val functionUnregisterAllResources = "unregisterAllResources()".keccak().copyOfRange(0, 4)
val functionUnregisterProvider = "unregisterProvider(address)".keccak().copyOfRange(0, 4)
val functionUnregisterResource = "unregisterResource(uint256)".keccak().copyOfRange(0, 4)
}
// tuples
data class PermissionRequest(val protectedResourceId: AbiUint256,val requestedMethod: AbiUint8) : AbiTuple {
constructor(dataDecoder: DataDecoder) : this(dataDecoder.next(AbiUint256::class),dataDecoder.next(AbiUint8::class))override fun encode(): DataEncoder {
return DataEncoder()
.encode(protectedResourceId)
.encode(requestedMethod)
}
companion object : Dynamic {
override fun isDynamic() = isTypeDynamic(AbiUint256::class)||isTypeDynamic(AbiUint8::class)}
}
data class Permission(val protectedResourceId: AbiUint256,val grantedMethod: AbiUint8) : AbiTuple {
constructor(dataDecoder: DataDecoder) : this(dataDecoder.next(AbiUint256::class),dataDecoder.next(AbiUint8::class))override fun encode(): DataEncoder {
return DataEncoder()
.encode(protectedResourceId)
.encode(grantedMethod)
}
companion object : Dynamic {
override fun isDynamic() = isTypeDynamic(AbiUint256::class)||isTypeDynamic(AbiUint8::class)}
}
// events
override val listOfEventDecoders: List<(Log) -> Event?> = listOf()
// functions
suspend fun deleteRule(protectedResourceId: AbiUint256,index: AbiUint256): TransactionReceipt {
val params = DataEncoder()
.encode(Data4(functionDeleteRule))
.encode(protectedResourceId)
.encode(index).build()
return transact(params)
}
suspend fun registerProvider(protectionAuthorizationId: AbiAddress): TransactionReceipt {
val params = DataEncoder()
.encode(Data4(functionRegisterProvider))
.encode(protectionAuthorizationId).build()
return transact(params)
}
suspend fun registerResource(protectedResourceId: AbiUint256): TransactionReceipt {
val params = DataEncoder()
.encode(Data4(functionRegisterResource))
.encode(protectedResourceId).build()
return transact(params)
}
fun requestPermissions(userId: AbiAddress,permissionRequests: List<PermissionRequest>): List<Permission> {
val params = DataEncoder()
.encode(Data4(functionRequestPermissions))
.encode(userId)
.encode(permissionRequests, -1).build()
val decoder = DataDecoder(call(params))
return decoder.next(Permission::class, -1) as List<Permission>}
suspend fun setRule(protectedResourceId: AbiUint256,userId: AbiAddress,method: AbiUint8): TransactionReceipt {
val params = DataEncoder()
.encode(Data4(functionSetRule))
.encode(protectedResourceId)
.encode(userId)
.encode(method).build()
return transact(params)
}
suspend fun unregisterAllProviders(): TransactionReceipt {
val params = DataEncoder()
.encode(Data4(functionUnregisterAllProviders)).build()
return transact(params)
}
suspend fun unregisterAllResources(): TransactionReceipt {
val params = DataEncoder()
.encode(Data4(functionUnregisterAllResources)).build()
return transact(params)
}
suspend fun unregisterProvider(protectionAuthorizationId: AbiAddress): TransactionReceipt {
val params = DataEncoder()
.encode(Data4(functionUnregisterProvider))
.encode(protectionAuthorizationId).build()
return transact(params)
}
suspend fun unregisterResource(protectedResourceId: AbiUint256): TransactionReceipt {
val params = DataEncoder()
.encode(Data4(functionUnregisterResource))
.encode(protectedResourceId).build()
return transact(params)
}
}
