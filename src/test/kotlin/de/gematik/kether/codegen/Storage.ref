package de.gematik.kether.codegen
import de.gematik.kether.abi.DataDecoder
import de.gematik.kether.abi.DataEncoder
import de.gematik.kether.abi.isTypeDynamic
import de.gematik.kether.abi.types.*
import de.gematik.kether.contracts.Contract
import de.gematik.kether.contracts.Event
import de.gematik.kether.eth.Eth
import de.gematik.kether.eth.types.*
import de.gematik.kether.extensions.hexToByteArray
import de.gematik.kether.extensions.keccak
import kotlinx.serialization.ExperimentalSerializationApi
import java.math.BigInteger
@OptIn(ExperimentalSerializationApi::class)
class Storage(
eth: Eth,
baseTransaction: Transaction = Transaction()
) : Contract(eth, baseTransaction) {
companion object {
// deployment
val byteCode = "0x608060405234801561001057600080fd5b506101df806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80632e64cec114610046578063371303c0146100645780636057361d1461006e575b600080fd5b61004e61008a565b60405161005b91906100cd565b60405180910390f35b61006c610093565b005b61008860048036038101906100839190610119565b6100aa565b005b60008054905090565b60016000546100a29190610175565b600081905550565b8060008190555050565b6000819050919050565b6100c7816100b4565b82525050565b60006020820190506100e260008301846100be565b92915050565b600080fd5b6100f6816100b4565b811461010157600080fd5b50565b600081359050610113816100ed565b92915050565b60006020828403121561012f5761012e6100e8565b5b600061013d84828501610104565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610180826100b4565b915061018b836100b4565b92508282019050808211156101a3576101a2610146565b5b9291505056fea2646970667358221220e86e0d00b885a36cc9b49156cb5644baf78ddbf47d9d7aa4fdebf7f5fbac588d64736f6c63430008110033".hexToByteArray()
fun deploy(eth:Eth, from: Address) = deploy(eth, from, Data(byteCode))
// 4 byte selectors (functions) and topics (events)
val functionInc = "inc()".keccak().copyOfRange(0, 4)
val functionRetrieve = "retrieve()".keccak().copyOfRange(0, 4)
val functionStore = "store(uint256)".keccak().copyOfRange(0, 4)
}
// tuples
// events
override val listOfEventDecoders: List<(Log) -> Event?> = listOf()
// functions
suspend fun inc(): TransactionReceipt {
val params = DataEncoder()
.encode(Data4(functionInc)).build()
return transact(params)
}
fun retrieve(): AbiUint256 {
val params = DataEncoder()
.encode(Data4(functionRetrieve)).build()
val decoder = DataDecoder(call(params))
return decoder.next(AbiUint256::class)}
suspend fun store(num: AbiUint256): TransactionReceipt {
val params = DataEncoder()
.encode(Data4(functionStore))
.encode(num).build()
return transact(params)
}
}
